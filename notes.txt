Configured webpack and React using:  https://scotch.io/tutorials/setup-a-react-environment-using-webpack-and-babel


MVP1:

Build a page that represents traditional web-style guitar tabs:

Example:  https://www.ultimate-guitar.com/lessons/for_beginners/how_to_read_tabs.html

Goals:


1)  Display 6 string grid.
2)  Attach click events to each node of the grid, be able to click and enter a number.
3)  Clicking a tab with a number allows the tab to be edited.
4)  Have the ability to clear all tabs back to blank.
6)  Only create a SINGLE TAB - (multiple tabs / collections of tabs will come later)



Naming Conventions:

														Page/Composition:  A collection of tabs.


														Tab:
																		e|------------------------|
																		B|------------------------|
																		G|------------------------|
																		D|------------------------|
																		A|------------------------|
																		E|------------------------|


														'-'  -->  Node.  A singular dash within a string.
														'e|------------------------|' --> String.  6 in total per tab.


Tab Schema:

// an object with id, other metadata and array of tabs
Composition: {
	id: int,
	name: 'Example Song',
	date_created: Date,
	date_updated: Date,
	data:[
		// each tab is an object with an id and an array of g-strings.
		tab:{
			
			id: int,
			nodeCount: int,  // this should be the amt of nodes we show for each string.  (we should cap it at some point)
			data: [
				// each g-string is an object of ordered nodes, starting at 1 (guitar string 1).
				S1:{
					1:'-',
					2:'-',
					3:'-'
				},			
				S2:{
					1:'-',
					2:'-',
					3:'-'
				}
			]

		},
		tab:{},
		tab:{}
	]
}






IDEAS FOR LATER:

1) Give User the ability to config how long/short the tab lines can extend to.
2)  Add Redux for state management.


Optimize webpack ideas:  

https://www.jonathan-petitcolas.com/2015/05/15/howto-setup-webpack-on-es6-react-application-with-sass.html


7/18/2017 TODO:

1)  Should be able to close input nodes on click outside of element.
2)  Create a Tab component that contains 6 gString components. [DONE]
3) 	Clear all tabs back to blank
4)  Setup an Express server
5)  Setup a mongoDB - try to persist a created tab.
6)  Be able to load a tab.
7)  Style the tab module
8)  Could create a navbar
9)  Research Redux - do we need to use it??? 
10) Figure out React architecture - when do we NOT need to use it?  (ie - navbars, stuff like that)

7/26/2017 TODO:

1) Create a SUBMIT button that sends over TAB data of all strings. [DONE]

7/30/2017 TODO:

1)  Create a add more nodes button for a tab. Need to update the Tab component on add/subtract of all nodes per string.
2)  Create a clear tab button - update Tab state on clear accordingly. [DONE]
3)  Fix Tab styling so all strings are bunched neatly together.
4)  On click of a node - input should be focused (currently need to click on node, then click inside input) [DONE]

8/1/2017 TODO:

1)  Figure out why we aren't getting access to refs after click event / element swaps. [DONE]

8/8/2017 TODO:

1)  Clicking outside a form closes the form.
2)  Create Composition Class - should contain many tabs. 
3)  Should be able to scroll through multiple tabs of a composition.  (Need to figure out a solid design for this).
4)  Replace local storage get/set with pings to our server.  
5)  Start building out schema for storing compositions.  
6)  Design a simple user login for User.  That way we can assign compositions to a single User. 
7)  Add navbar


8/27/17
1)  Remove saveTab from tab.  We only need to save Compositions;  [DONE]


2)  Add User backend support.  
|___ Add API call from client to log in / sign up user


3)  On Log in -->  List all compositions.  Add a User-Home screen that contains many compositions.
|___ On click of a composition tile/etc.. should navigate to a composition view.


9/5/2017

1)  Finish Login -->  Should be able to submit form --> ping DB --> logs in User --> returns User Obj --> form clears [MARK]
2)  Add Composition List
|___ Clicking a compisition in the composition list takes User to Composition page
3)  Save Composition
4)  GET composition


9/10/2017

1)  Finish writing getOne and getAll for composition route.  
2)  Finish Login -->  Should be able to submit form --> ping DB --> logs in User 				--> returns User Obj --> form clears [MARK]
3)  Handle transition from view1 --> view2 --> view3
		(expect on login to return {uid and username}) [SAM] - [DONE]


-------- WHAT OUR VIEWS LOOK LIKE (only 3) ---------


1)  Intro screen :  Nothing for now - maybe a login and a demo of the app with 					flashy pics and a blurb.

2)  After signing in:  List of compositions (eventually more data about the user)

3)  Single composition view (this is where we can edit a pre-existing comp OR start 		a new one)



9/12/2017

**Idea**  Serve the client from the express server (https://stormpath.com/blog/build-a-react-app-with-user-authentication).


1)  Swap out login form on succesful login to username and a logout button. {IN PROGRESS}
2)  Set cookie for user login - persist session.
3)  Add logout - when logged out - stay on login screen.
4)  Back-End:  Support getAllUserComps and getSingleComp.
5)  Back-End:  Support saving comp.  (should be linked with uid).
6)  Front-End & Back-End:  Support starting new comp.
7)  Front-End & Back-End:  For login - need to return & render error if 						incorrect creds
8)  If time - start styling.


9/19/2017

Work done:

Front-end
- On login, setState to user. On succesful setState, change view to compositionList. Pass the user obj down as props.
- Inside CompositionList - ping for all compositions by that user's id. (Need to figure out how to assign many Compositions by same uid)
- Iterate over all compositions and render.
- Clicking on the one composition that gets rendered brings us to the composition editor.

Back-End:
- Modified Composition schema to accept a name.
- Add the /all endpoint to the Composition route.


TODO:

Research:
1) How is mongodb aware of Schemas?  On server runtime?  (ie:  If I make changes to model params, etc... when will it pick those changes up?)

Back - End:
1)  Need to figure out how to assign many Compositions by same uid
2)  Determine if we need to add Schema refs to Composition and User models.
3)  Add the /new endpoint to the Composition route
4)  Add the /edit endpoint to the Composition route.


Front-End:
1)  Create a back button 
2)  Do we need react-router?  
3)  Add a 'NEW' button in CompositionList view. [SAM]
4)  Add ability to Save a Composition [MARK]
5)  Populate Composition view on select of Composition from C-list. [MARK]





10/10/2017

What we Did:

- Open an existing tab from the Composition List (/single route on server-side)
- Back & Front end support to create a tab

TODO:

- Add Front & Back end support to SAVE a Composition.
- Add Front & Back end support to DELETE a Composition
- Add Front & Back end support to ADD a TAB
- Add Front & Back end support to DELETE a TAB
- Add Front & Back end support to Rename a TAB???

- Front End:  Close all nodes in a Tab component if another Node is selected



10/18/2017

TO CONSIDER:

- Using POST for delete requests.




